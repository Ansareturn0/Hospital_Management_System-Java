package com.Hospital.UIClasses;

import com.Hospital.Core_Classes.Patient;
import com.Hospital.SearchingAndModiciation.ModifyEntities;

import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.Stack;

public class PatientsInWard_Screen extends javax.swing.JFrame{
    private TreeNode rootNode;
    private final ModifyEntities modificationFunctions=new ModifyEntities();
    DefaultTableModel model;
    public PatientsInWard_Screen() {
        this.rootNode = null;
        initComponents();
        model=(DefaultTableModel) showPatientTable.getModel();
        Image icon = Toolkit.getDefaultToolkit().getImage("UIComponents\\hos.png");
        this.setIconImage(icon);
        this.setTitle("Lahore General Hospital I.M.S");
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        buildingTree();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        buttonGroupOPDAndEmergency = new javax.swing.ButtonGroup();
        addPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ServiceLable = new javax.swing.JLabel();
        backToWellcomeScreen = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        showPatientTable = new javax.swing.JTable();
        ViewOPDRadioButton = new javax.swing.JRadioButton();
        ViewEmergencyRadioButton = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addPanel.setBackground(new java.awt.Color(171, 183, 183));
        addPanel.setPreferredSize(new java.awt.Dimension(1609, 942));

        jLabel1.setIcon(new javax.swing.ImageIcon("UIComponents\\logo.png")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(30, 130, 76));
        jLabel2.setText("Lahore General Hospital Management System");

        ServiceLable.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        ServiceLable.setForeground(new java.awt.Color(30, 130, 76));
        ServiceLable.setText(" ");


        backToWellcomeScreen.setBackground(new java.awt.Color(171, 183, 183));
        backToWellcomeScreen.setIcon(new javax.swing.ImageIcon("UIComponents\\back.png")); // NOI18N
        backToWellcomeScreen.setText("Back");
        backToWellcomeScreen.setToolTipText("Back to Wellcome Screen");
        backToWellcomeScreen.setBorder(null);
        backToWellcomeScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToWellcomeScreenActionPerformed(evt);
            }
        });

        showPatientTable.setAutoCreateRowSorter(true);
        showPatientTable.setBackground(new java.awt.Color(221, 221, 221));
        showPatientTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        showPatientTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "ID", "Name", "Service", "Age", "Gender", "COVID-19", "Phone", "C.N.I.C", "Address", "Admitted", "Entery Date"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        showPatientTable.setToolTipText("Current Details of Patient");
        showPatientTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane2.setViewportView(showPatientTable);

        ViewOPDRadioButton.setBackground(new java.awt.Color(171, 183, 183));
        buttonGroupOPDAndEmergency.add(ViewOPDRadioButton);
        ViewOPDRadioButton.setText("OPD Patients");
        ViewOPDRadioButton.setBorder(null);
        ViewOPDRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewOPDRadioButtonActionPerformed(evt);
            }
        });

        ViewEmergencyRadioButton.setBackground(new java.awt.Color(171, 183, 183));
        buttonGroupOPDAndEmergency.add(ViewEmergencyRadioButton);
        ViewEmergencyRadioButton.setText("Emergency Patients");
        ViewEmergencyRadioButton.setBorder(null);
        ViewEmergencyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewEmergencyRadioButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Clear Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
                addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addPanelLayout.createSequentialGroup()
                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addPanelLayout.createSequentialGroup()
                                                .addGap(348, 348, 348)
                                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(addPanelLayout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addGap(311, 311, 311)
                                                                .addComponent(backToWellcomeScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(addPanelLayout.createSequentialGroup()
                                                .addGap(67, 67, 67)
                                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ViewOPDRadioButton)
                                                        .addGroup(addPanelLayout.createSequentialGroup()
                                                                .addGap(17, 17, 17)
                                                                .addComponent(jButton1))
                                                        .addComponent(ViewEmergencyRadioButton))
                                                .addGap(58, 58, 58)
                                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ServiceLable, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(22, Short.MAX_VALUE))
        );
        addPanelLayout.setVerticalGroup(
                addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addPanelLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(backToWellcomeScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(ViewOPDRadioButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ViewEmergencyRadioButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton1)
                                                .addGap(303, 303, 303))
                                        .addGroup(addPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ServiceLable)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(22, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1314, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    //==================================================================================================================
    private void backToWellcomeScreenActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your Back to Wellcome here
        Welcome_Screen welcome_screen=new Welcome_Screen();
        addPanel.setLayout(new java.awt.BorderLayout());
        addPanel.removeAll();
        addPanel.add(welcome_screen.MainPanel);
        addPanel.validate();
    }
    //==================================================================================================================
    private void ViewOPDRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //opd patients
        InOrderTraversalOpdPatients();
    }
    //==================================================================================================================
    /**
     *<h2>‣ Algorithm:</h2>
     *<p>» Initialize an empty stack.</p>
     *<p>» Push the current node (starting from the root node) onto the stack.
     * Continue pushing nodes to the left of the current node until a NULL value is reached.</p>
     *<p>» If the current node is NULL and the stack is not empty:
     * <p>1. Remove and print the last item from the stack.</p>
     * <p>2. Set the current node to be the node to the right of the removed node.</p>
     * <p>3. Repeat the second step of the algorithm.</p></p>
     * <p>» If the current node is NULL and the stack is empty, then the algorithm has finished.</p>
     */
    private void InOrderTraversalOpdPatients()
    {
        //Implementing Inorder Tree Traversal of TREE
        Stack<TreeNode> stack=new Stack<>();
        TreeNode targetedNode=rootNode;
        model.setRowCount(0);
        ServiceLable.setText("Out-Patient Department");
        while(!stack.empty() || targetedNode!=null)
        {
            if(targetedNode!=null)
            {
                stack.push(targetedNode);
                targetedNode=targetedNode.moveToLeft();
            }
            else
            {
                targetedNode=stack.pop();
                if(targetedNode.patientData.getService().equals("OPD"))
                {
                    model.addRow(new Object[]{targetedNode.patientData.getId(), targetedNode.patientData.getName(), targetedNode.patientData.getService(),
                            targetedNode.patientData.getAge(), targetedNode.patientData.getGender(), targetedNode.patientData.getCovid(), targetedNode.patientData.getPhone(),
                            targetedNode.patientData.getCnic(), targetedNode.patientData.getAddress(), targetedNode.patientData.getAdmitted(), targetedNode.patientData.getTime()});

                }
                targetedNode=targetedNode.moveToRight();
            }
        }
    }
    //==================================================================================================================
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        model.setRowCount(0);
        ServiceLable.setText("-N/A-");
        buttonGroupOPDAndEmergency.clearSelection();
    }
    //==================================================================================================================
    private void ViewEmergencyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //Emergency
        InOrderTraversalEmergencyPatients();
    }
    //==================================================================================================================
    /**
     *<h2>‣ Algorithm:</h2>
     *<p>» Initialize an empty stack.</p>
     *<p>» Push the current node (starting from the root node) onto the stack.
     * Continue pushing nodes to the left of the current node until a NULL value is reached.</p>
     *<p>» If the current node is NULL and the stack is not empty:
     * <p>1. Remove and print the last item from the stack.</p>
     * <p>2. Set the current node to be the node to the right of the removed node.</p>
     * <p>3. Repeat the second step of the algorithm.</p></p>
     * <p>» If the current node is NULL and the stack is empty, then the algorithm has finished.</p>
     */
    private void InOrderTraversalEmergencyPatients()
    {
        //Implementing Inorder Tree Traversal of TREE
        Stack<TreeNode> stack=new Stack<>();
        TreeNode targetedNode=rootNode;
        model.setRowCount(0);
        ServiceLable.setText("Emergency-Patient Department");
        while(!stack.empty() || targetedNode!=null)
        {
            if(targetedNode!=null)
            {
                stack.push(targetedNode);
                targetedNode=targetedNode.moveToLeft();
            }
            else
            {
                targetedNode=stack.pop();
                if(targetedNode.patientData.getService().equals("Emergency"))
                {
                    model.addRow(new Object[]{targetedNode.patientData.getId(), targetedNode.patientData.getName(), targetedNode.patientData.getService(),
                            targetedNode.patientData.getAge(), targetedNode.patientData.getGender(), targetedNode.patientData.getCovid(), targetedNode.patientData.getPhone(),
                            targetedNode.patientData.getCnic(), targetedNode.patientData.getAddress(), targetedNode.patientData.getAdmitted(), targetedNode.patientData.getTime()});

                }
                targetedNode=targetedNode.moveToRight();
            }
        }
    }
    //==================================================================================================================
    /**
     * @param data Patient type:
     *            <h2>‣ Algorithm:</h2>
     *<p>» Its Very much similar to contains() method.</p>
     *<p>» To insert a node our first task is to find the place to insert the node.</p>
     *<p>» Take current = root .</p>
     *<p>» start from the current and compare root.patientData with n.</p>
     *<p>» if current.patientData is greater than n that means we need to go to the left of the root.</p>
     *<p>» if current.patientData is smaller than n that means we need to go to the right of the root.</p>
     *<p>» if any point of time current is null that means we have reached to the leaf node, insert your
     *             node here with the help of parent node. (See code)</p>
     * @return true if Node is added as child else false.
     */
    private boolean insert(Patient data)
    {
        TreeNode currentNode=new TreeNode(data);
        if(rootNode==null)
        {
            rootNode=currentNode;
            return true;
        }
        TreeNode targetingNode=rootNode;
        TreeNode parentNode=null;
        while(true)
        {
            parentNode=targetingNode;
            if(Integer.parseInt(data.getId())<Integer.parseInt(targetingNode.patientData.getId()))
            {
                targetingNode=targetingNode.moveToLeft();
                if(targetingNode==null)
                {
                    parentNode.setLeftLink(currentNode);
                    return true;
                }
            }
            else
            {
                targetingNode=targetingNode.moveToRight();
                if(targetingNode==null)
                {
                    parentNode.setRightLink(currentNode);
                    return true;
                }
            }
        }
    }
    //==================================================================================================================
    private void buildingTree()
    {
        java.util.LinkedList<Patient> patientLinkedList=modificationFunctions.searchEntities.getPatientLinkedListUtil();
        for(int count=0;count<patientLinkedList.size();count++)
        {
            insert(patientLinkedList.get(count));
        }
    }
    //------------------------------------------------------------------------------------------------------------------

    // Variables declaration - do not modify
    private javax.swing.JLabel ServiceLable;
    private javax.swing.JRadioButton ViewEmergencyRadioButton;
    private javax.swing.JRadioButton ViewOPDRadioButton;
    private javax.swing.JToggleButton backToWellcomeScreen;
    private javax.swing.ButtonGroup buttonGroupOPDAndEmergency;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JPanel addPanel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable showPatientTable;
    // End of variables declaration
}
